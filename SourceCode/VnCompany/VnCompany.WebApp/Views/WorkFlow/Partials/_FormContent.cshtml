@using VnCompany.WebApp.Helpers
@using VnCompany.WebApp.Resources
@using Newtonsoft.Json
@model VnCompany.WebApp.Models.FormViewModel
<div id="modalSearchFormContent">
    <div class="m-portlet">
        <div class="m-portlet__body" style="max-height: 50vh; overflow-y: scroll">
            <div class="m-section">
                <div class="m-section__content table-responsive">
                    <table id="FormSearchResults" class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="text-center" width="3%"></th>
                                <th class="text-center" width="50">#</th>
                                <th class="text-center">@ManagerResource.LB_CODE</th>
                                <th class="text-center">@ManagerResource.LB_NAME</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.SearchResult != null && Model.SearchResult.Count > 0)
                            {
                                var stt = 0;
                                foreach (var record in Model.SearchResult)
                                {
                                    stt++;
                                    <tr>
                                        <td class="text-center">
                                            <label class="m-checkbox m-checkbox--brand" style="transform: translate(5px,-5px);">
                                                <input class="search-form-item-cbx new-item hidden" type="checkbox" name="SearchFormsSelected[]" value="@record.Id" data-id="@record.Id"
                                               data-info="@(JsonConvert.SerializeObject(record))" />
                                                <span></span>
                                            </label>

                                        </td>
                                        <td class="text-center">@(stt + (Model.CurrentPage - 1) * Model.PageSize) </td>
                                        <td>@record.Code</td>
                                        <td>
                                            @record.Name
                                        </td>
                                        <td class="text-center">
                                            <a href="javascript:;" class="text-info search-form-item-view new-item" data-detail="/WorkFlow/SearchFormViewDetail/@record.Id"><i class="fa fa-eye"></i></a>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="11">
                                        @ManagerResource.LB_NO_RECORD
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>
    @{
        await RenderPaging();
    }
</div>

@functions {
    private async Task RenderPaging()
    {
        <div class="m_datatable m-datatable m-datatable--default m-datatable--brand m-datatable--loaded">
            <div class="m-datatable__pager m-datatable--paging-loaded clearfix">
                @if (Model.WasOverRecordsInPage())
                {
                    @HtmlHelpers.BootstrapPager(Model.CurrentPage, index => "javascript:;", Model.TotalCount, pageSize: Model.PageSize, numberOfLinks: 10, onclickEvent: "FormSearchTool.Search")
                }

                @if (Model.TotalCount > 0)
                {
                    <div class="m-datatable__pager-info">
                        <span class="m-datatable__pager-detail">
                            @ManagerResource.LB_RECORDS_ALL @Model.TotalCount @ManagerResource.LB_RECORDS @Model.StartCount() 〜 @Model.EndCount(Model.SearchResult.Count())
                        </span>
                    </div>
                }
            </div>
        </div>
    }
}